@model List<LoyaltyCouponsSystem.BLL.ViewModel.Distributor.DistributorViewModel>

@{
    ViewData["Title"] = "All Distributors";
    Layout = "~/Views/Shared/_LayoutCoupon.cshtml";
}

<!-- Include Burger Menu for Mobile -->
@await Html.PartialAsync("_BurgerMenu")

<div class="container mt-4">
    <h1 class="text-primary text-center"><b>@SharedLocalizer["AllDistributors"]</b></h1>

    <!-- Search Box and Add Button -->
    <div class="d-flex justify-content-center align-items-center mb-4 gap-3">
        <input type="text"
               id="searchBox"
               class="form-control"
               placeholder=@SharedLocalizer["Search"]" 
               style="width: 50%; border-radius: 20px; padding: 10px; font-size: 16px; border: 2px solid #007bff; background-color: #f9f9f9;" />
        <a href="@Url.Action("AddDistributor", "Distributor")" class="btn btn-add-customer">
            <i class="fas fa-plus"></i> @SharedLocalizer["AddNewDistributor"]
        </a>
    </div>

    <!-- Table -->
    <div class="table-responsive">
        <table id="distributorTable" class="table table-hover table-striped shadow-lg rounded border-light-modern">
            <thead class="thead-dark bg-primary text-white">
                <tr>
                    <th>@SharedLocalizer["Code"]</th>
                    <th>@SharedLocalizer["Name"]</th>
                    <th>@SharedLocalizer["PhoneNumber"]</th>
                    <th>@SharedLocalizer["Governorate"]</th>
                    <th>@SharedLocalizer["Area"]</th>
                    <th>@SharedLocalizer["Customers"]</th>
                  
                    <th>@SharedLocalizer["CreatedBy"]</th>
                    <th>@SharedLocalizer["CreationDateTime"]</th>
                    <th>@SharedLocalizer["UpdatedBy"]</th>
                    <th>@SharedLocalizer["UpdatedAt"]</th>
                    <th>@SharedLocalizer["Status"]</th>
                    <th>@SharedLocalizer["Action"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var distributor in Model)
                {
                    <tr id="row-@distributor.DistributorID">
                        <td>@distributor.Code</td>
                        <td>@distributor.Name</td>
                        <td>@distributor.PhoneNumber1</td>
                        <td>@distributor.SelectedGovernate</td>
                        <td>@distributor.SelectedCity</td>
                        <td>
                            
                                <!-- View Customers Button -->
                                <button type="button" class="btn btn-info btn-sm" data-bs-toggle="modal" data-bs-target="#customersModal-@distributor.DistributorID">
                                    View Customers
                                </button>
                                <!-- Modal -->
                                <div class="modal fade" id="customersModal-@distributor.DistributorID" tabindex="-1" aria-labelledby="customersModalLabel-@distributor.DistributorID" aria-hidden="true">
                                    <div class="modal-dialog modal-dialog-centered modal-lg">
                                        <div class="modal-content">
                                            <div class="modal-header bg-primary text-white">
                                                <h5 class="modal-title" id="customersModalLabel-@distributor.DistributorID">
                                                    Customers of @distributor.Name
                                                </h5>
                                                <button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <div class="modal-body">

                                                <!-- Existing Customers List -->
                                                <h5>Assigned Customers:</h5>
                                                <ul id="customerList-@distributor.DistributorID" class="list-group list-group-flush">
                                                    @foreach (var customer in distributor.SelectedCustomerNames)
                                                    {
                                                        <li class="list-group-item d-flex align-items-center" data-customer-name="@customer">
                                                            <i class="fas fa-user-circle text-primary me-3"></i> @customer
                                                            <button type="button" class="btn btn-danger btn-sm ms-auto" onclick="removeCustomerFromDistributor(@distributor.DistributorID, '@customer')">Delete</button>
                                                        </li>
                                                    }
                                                </ul>

                                                <!-- Add New Customers -->
                                                <h5 class="mt-4">Add New Customers:</h5>
                                                <select id="activeCustomersSelect-@distributor.DistributorID" class="form-select mb-3">
                                                    <option value="">Select a customer</option>
                                                    @foreach (var customer in distributor.AvailableCustomers)
                                                    {
                                                        <option value="@customer.CustomerID">@customer.Name</option>
                                                    }
                                                </select>
                                                <button type="button" class="btn btn-success" onclick="addCustomerToDistributor(@distributor.DistributorID)">
                                                    Add Selected Customer
                                                </button>
                                            </div>

                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            
                            
                        </td>
                        <td>@distributor.CreatedBy</td>
                        <td>@distributor.CreatedAt</td>
                        <td>@distributor.UpdatedBy</td>
                        <td>@distributor.UpdatedAt</td>
                        <td>
                            <span class="badge @(distributor.IsActive ? "bg-success" : "bg-danger")">
                                @(distributor.IsActive ? "Active" : "Inactive")
                            </span>
                        </td>
                        <td>
                            <div style="display: flex; align-items: center; gap: 10px; justify-content: center;">
                                <button class="btn btn-sm @(distributor.IsActive ? "btn-danger" : "btn-success") toggle-activation"
                                        style="padding: 8px 20px; font-size: 14px; display: inline-block; text-align: center; border-radius: 5px; width: 100px;"
                                        data-distributor-id="@distributor.DistributorID"
                                        data-is-active="@distributor.IsActive">
                                    @(distributor.IsActive ? "Deactivate" : "Activate")
                                </button>
                                <a href="@Url.Action("UpdateDistributor", "Distributor", new { id = distributor.DistributorID })"
                                   class="btn btn-outline-primary btn-sm"
                                   style="padding: 8px 20px; font-size: 14px; display: inline-block; text-align: center; border-radius: 5px; width: 100px;">
                                    <i class="fas fa-edit"></i> Edit
                                </a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Confirmation Modal for Toggle Activation -->
    <div class="modal fade" id="toggleConfirmationModal" tabindex="-1" aria-labelledby="toggleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-warning text-dark">
                    <h5 class="modal-title" id="toggleModalLabel">Confirm Toggle Activation</h5>
                    <button type="button" class="btn-close text-dark" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to <span id="toggleAction">activate</span> this distributor?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" id="confirmToggleButton" class="btn btn-warning">Confirm</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Pagination Controls -->
<div id="paginationContainer" class="mt-4 text-center"></div>


<style>
    /* Table Styling */
    .table {
        border-radius: 12px;
        overflow: hidden;
        text-align: center;
    }

        .table th {
            text-align: center;
            background-color: #007bff !important;
            color: #ffffff !important;
            font-weight: bold;
            padding: 12px;
            border-bottom: 2px solid #ffffff;
            text-transform: uppercase;
        }

    .table-hover tbody tr:hover {
        background-color: #e9f5ff;
    }

    .btn-outline-primary:hover {
        background-color: #007bff;
        color: white;
    }

    .btn-outline-danger:hover {
        background-color: #dc3545;
        color: white;
    }

    .btn-add-customer {
        background-color: #007bff;
        color: white;
        font-weight: bold;
        border-radius: 30px;
        padding: 10px 20px;
    }

        .btn-add-customer:hover {
            background-color: #0056b3;
            color: white;
        }

    h1 {
        font-family: 'Verdana', sans-serif;
        font-weight: bold;
        letter-spacing: 1px;
    }

    .d-flex {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    #paginationContainer {
        margin-top: 20px;
    }

        #paginationContainer .btn {
            font-size: 14px !important;
            padding: 8px 12px;
            border-radius: 6px;
            cursor: pointer;
            margin: 0 5px;
        }

        #paginationContainer .btn-primary {
            background-color: #007bff;
            color: white;
            border: none;
        }

        #paginationContainer .btn-outline-primary {
            border: 1px solid #007bff;
            color: #007bff;
            background-color: white;
        }

        #paginationContainer .btn:hover {
            opacity: 0.8;
        }

    /* Modal Styling */
    .modal-content {
        border-radius: 10px;
        box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
        overflow: hidden;
    }

    .modal-header {
        background-color: #007bff;
        color: white;
        font-family: 'Verdana', sans-serif;
        font-weight: bold;
        text-transform: uppercase;
    }

    .list-group-item {
        display: block;
        border: none;
        padding: 12px 16px;
        transition: background-color 0.2s ease-in-out;
    }

        .list-group-item:hover {
            background-color: #f8f9fa;
        }

    .fas.fa-user-circle {
        font-size: 1.5rem;
        color: #007bff;
    }

    .modal.fade .modal-dialog {
        transition: transform 0.3s ease-out, opacity 0.3s ease-out;
        transform: translateY(-50px);
        opacity: 0;
    }

    .modal.show .modal-dialog {
        transform: translateY(0);
        opacity: 1;
    }

    /* Styling for inactive rows */
    .inactive-row {
        background-color: #f5f5f5; /* Light gray background */
        color: #6c757d; /* Muted text color */
    }

        .inactive-row td {
            text-decoration: line-through; /* Strikethrough text for all columns */
        }

            /* Exclude "Actions" column from line-through */
            .inactive-row td:last-child,
            .inactive-row td:last-child * {
                text-decoration: none !important;
            }


    #searchBox {
        border-radius: 20px;
        padding: 10px;
        font-size: 16px;
        border: 2px solid #007bff;
        background-color: #f9f9f9;
    }

        #searchBox::placeholder {
            font-style: italic;
            color: #aaa;
        }

</style>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>


<!-- SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!-- Include Select2 CSS -->
<link href="https://cdn.jsdelivr.net/npm/select2@4.0.13/dist/css/select2.min.css" rel="stylesheet" />

<!-- Include jQuery (required by Select2) -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- Include Select2 JS -->
<script src="https://cdn.jsdelivr.net/npm/select2@4.0.13/dist/js/select2.min.js"></script>



<script>


    //serach function for search box above the table
                    document.addEventListener("DOMContentLoaded", function () {
    const searchBox = document.getElementById("searchBox");
    const tableRows = document.querySelectorAll("#distributorTable tbody tr");

    searchBox.addEventListener("input", function () {
        const searchTerm = searchBox.value.toLowerCase().trim();

        tableRows.forEach(row => {
            const statusBadge = row.querySelector(".badge");
            const status = statusBadge ? statusBadge.textContent.toLowerCase().trim() : "";

            if (searchTerm === "active") {
                // Show only rows with status "Active"
                if (status === "active") {
                    row.style.display = ""; // Show
                } else {
                    row.style.display = "none"; // Hide
                }
            } else if (searchTerm === "inactive") {
                // Show only rows with status "Inactive"
                if (status === "inactive") {
                    row.style.display = ""; // Show
                } else {
                    row.style.display = "none"; // Hide
                }
            } else {
                // General search for other terms (non-status terms)
                const rowText = Array.from(row.children)
                    .map(cell => cell.textContent.toLowerCase())
                    .join(" ");

                if (rowText.includes(searchTerm)) {
                    row.style.display = ""; // Show matching rows
                } else {
                    row.style.display = "none"; // Hide non-matching rows
                }
            }
        });
    });
});





    document.addEventListener("DOMContentLoaded", function () {
        const tableBody = document.querySelector("#distributorTable tbody");
        const rowsPerPage = 10;
        const paginationContainer = document.getElementById("paginationContainer");

        // Rearrange rows based on status
            function rearrangeRows() {
        const tableBody = document.querySelector("#distributorTable tbody");
        const rows = Array.from(tableBody.querySelectorAll("tr"));

        // Separate active and inactive rows
        const activeRows = rows.filter(row => row.querySelector(".badge").textContent.trim() === "Active");
        const inactiveRows = rows.filter(row => row.querySelector(".badge").textContent.trim() === "Inactive");

        // Sort active rows by DistributorID in descending order
        activeRows.sort((a, b) => {
            const idA = parseInt(a.id.replace("row-", ""), 10);
            const idB = parseInt(b.id.replace("row-", ""), 10);
            return idB - idA; // Descending order
        });

        // Clear the table body and append rows in the new order
        tableBody.innerHTML = "";
        activeRows.forEach(row => tableBody.appendChild(row)); // Add active rows first
        inactiveRows.forEach(row => tableBody.appendChild(row)); // Add inactive rows last
    }


        // Style rows dynamically
        function styleRows() {
            const rows = Array.from(tableBody.querySelectorAll("tr"));
            rows.forEach(row => {
                const badge = row.querySelector(".badge");
                if (badge && badge.textContent.trim() === "Inactive") {
                    row.classList.add("inactive-row");
                } else {
                    row.classList.remove("inactive-row");
                }
            });
        }

        // Paginate rows
        function paginateRows(pageNumber) {
            const rows = Array.from(tableBody.querySelectorAll("tr"));
            rows.forEach((row, index) => {
                row.style.display = (index >= (pageNumber - 1) * rowsPerPage && index < pageNumber * rowsPerPage) ? "" : "none";
            });
            updatePagination(pageNumber, Math.ceil(rows.length / rowsPerPage));
        }

        // Update pagination controls
            function updatePagination(currentPage, totalPages) {
        paginationContainer.innerHTML = ""; // Clear previous buttons

        const maxVisiblePages = 3; // Limit the number of pagination buttons displayed
        let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
        let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

        if (endPage - startPage < maxVisiblePages - 1) {
            startPage = Math.max(1, endPage - maxVisiblePages + 1);
        }

        // Add "Previous" button
        if (currentPage > 1) {
            const prevButton = document.createElement("button");
            prevButton.textContent = "«";
            prevButton.className = "btn btn-sm mx-1 btn-outline-primary";
            prevButton.addEventListener("click", () => paginateRows(currentPage - 1));
            paginationContainer.appendChild(prevButton);
        }

        // Add page number buttons
        for (let i = startPage; i <= endPage; i++) {
            const button = document.createElement("button");
            button.textContent = i;
            button.className = `btn btn-sm mx-1 ${i === currentPage ? "btn-primary" : "btn-outline-primary"}`;
            button.addEventListener("click", () => paginateRows(i));
            paginationContainer.appendChild(button);
        }

        // Add "Next" button
        if (currentPage < totalPages) {
            const nextButton = document.createElement("button");
            nextButton.textContent = "»";
            nextButton.className = "btn btn-sm mx-1 btn-outline-primary";
            nextButton.addEventListener("click", () => paginateRows(currentPage + 1));
            paginationContainer.appendChild(nextButton);
        }
    }

        // Toggle Activation with SweetAlert
        document.querySelectorAll(".toggle-activation").forEach(button => {
            button.addEventListener("click", function () {
                const distributorId = this.getAttribute("data-distributor-id");
                const isActive = this.getAttribute("data-is-active") === "True";
                const action = isActive ? "Deactivate" : "Activate";

                Swal.fire({
                    title: `Are you sure?`,
                    text: `You are about to ${action} this distributor.`,
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: isActive ? "#d33" : "#28a745",
                    cancelButtonColor: "#6c757d",
                    confirmButtonText: `Yes, ${action}!`
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch(`/Distributor/ToggleActivation?distributorId=${distributorId}`, {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                        })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    const row = document.getElementById(`row-${distributorId}`);
                                    const statusBadge = row.querySelector(".badge");
                                    const toggleButton = row.querySelector(".toggle-activation");

                                    if (data.isActive) {
                                        statusBadge.textContent = "Active";
                                        statusBadge.classList.remove("bg-danger");
                                        statusBadge.classList.add("bg-success");
                                        toggleButton.textContent = "Deactivate";
                                        toggleButton.classList.remove("btn-success");
                                        toggleButton.classList.add("btn-danger");
                                        toggleButton.setAttribute("data-is-active", "True");
                                    } else {
                                        statusBadge.textContent = "Inactive";
                                        statusBadge.classList.remove("bg-success");
                                        statusBadge.classList.add("bg-danger");
                                        toggleButton.textContent = "Activate";
                                        toggleButton.classList.remove("btn-danger");
                                        toggleButton.classList.add("btn-success");
                                        toggleButton.setAttribute("data-is-active", "False");
                                    }

                                    rearrangeRows();
                                    styleRows();
                                    paginateRows(1); // Refresh pagination

                                    Swal.fire("Success!", `Distributor has been ${action.toLowerCase()}d successfully.`, "success");
                                } else {
                                    Swal.fire("Error!", data.message || "Failed to toggle activation.", "error");
                                }
                            })
                            .catch(error => {
                                Swal.fire("Error!", "An error occurred. Please try again.", "error");
                            });
                    }
                });
            });
        });

        // Initialize rearrangement, styling, and pagination
        rearrangeRows();
        styleRows();
        paginateRows(1);
    });

    function addCustomerToDistributor(distributorId) {
        const customerSelectElement = document.getElementById(`activeCustomersSelect-${distributorId}`);
        const customerId = customerSelectElement.value;

        if (!customerId) {
            Swal.fire({
                icon: 'warning',
                title: 'Oops...',
                text: 'Please select a customer to add.',
            });
            return;
        }

        Swal.fire({
            title: 'Are you sure?',
            text: 'Do you want to add this customer to the distributor?',
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: 'Yes, add it!',
            cancelButtonText: 'No, cancel',
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/Distributor/AddCustomer?distributorId=${distributorId}&customerId=${customerId}`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            let customerList = document.getElementById(`customerList-${distributorId}`);
                            let newCustomerItem = document.createElement("li");
                            newCustomerItem.classList.add("list-group-item", "d-flex", "align-items-center");
                            newCustomerItem.innerHTML = `
                                <i class="fas fa-user-circle text-primary me-3"></i> ${data.customerName}
                                <button type="button" class="btn btn-danger btn-sm ms-auto" onclick="removeCustomerFromDistributor(${distributorId}, ${data.customerId})">
                                    <i class="fas fa-trash"></i> Remove
                                </button>
                            `;
                            customerList.appendChild(newCustomerItem);

                            customerSelectElement.value = "";

                            Swal.fire({
                                icon: 'success',
                                title: 'Customer Added!',
                                text: `${data.customerName} has been added successfully.`,
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error!',
                                text: 'Failed to add the customer.',
                            });
                        }
                    })
                    .catch(error => {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: 'An error occurred while adding the customer.',
                        });
                        console.error("Error adding customer:", error);
                    });
            }
        });
    }

    function removeCustomerFromDistributor(distributorId, customerName) {
        Swal.fire({
            title: 'Are you sure?',
            text: 'Do you want to remove this customer from the distributor?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'No, cancel',
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/Distributor/RemoveCustomer?distributorId=${distributorId}&name=${encodeURIComponent(customerName)}`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const customerItem = document.querySelector(`#customerList-${distributorId} li[data-customer-name="${customerName}"]`);
                            if (customerItem) {
                                customerItem.remove();
                            }
                            Swal.fire({
                                icon: 'success',
                                title: 'Customer Removed!',
                                text: `${customerName} has been removed from the distributor.`,
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error!',
                                text: 'Failed to remove the customer.',
                            });
                        }
                    })
                    .catch(error => {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: 'An error occurred while removing the customer.',
                        });
                        console.error("Error removing customer:", error);
                    });
            }
        });
    }
</script>
