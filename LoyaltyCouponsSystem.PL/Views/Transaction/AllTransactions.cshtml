@model List<LoyaltyCouponsSystem.DAL.Entity.Transaction>
@{
    ViewData["Title"] = "All Transactions";
    Layout = "~/Views/Shared/_LayoutCoupon.cshtml";
}

<!-- Include Burger Menu for Mobile -->
@await Html.PartialAsync("_BurgerMenu")

<div class="container mt-5">
    <!-- Header Section -->
    <div class="text-center mb-4">
        <h1 class="display-5 text-primary"><b>@SharedLocalizer["Transactions"]</b></h1>
        <p class="lead text-secondary">@SharedLocalizer["All Transactions Exchange Permission"]</p>
    </div>

    <!-- Search Box -->
    <div class="row mb-3">
        <div class="col-md-12">
            <input type="text" id="searchBox" class="form-control" placeholder=@SharedLocalizer["Search"] />
        </div>
    </div>

    <!-- Table Section -->
    <div class="table-responsive">
        <table id="transactionsTable" class="table table-hover shadow-lg rounded border-light-modern">
            <thead class="thead-dark bg-primary text-white">
                <tr>
                    <th>@SharedLocalizer["ExchangePermission"]</th>
                    <th>@SharedLocalizer["Customer"]</th>
                    <th>@SharedLocalizer["Distributor"]</th>
                    <th>@SharedLocalizer["Governorate"]</th>
                    <th>@SharedLocalizer["Area"]</th>
                    <th>@SharedLocalizer["CreatedBy"]</th>
                    <th>@SharedLocalizer["CreationDateTime"]</th>
                    <th>@SharedLocalizer["Details"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in Model)
                {
                    <tr>
                        <td>@transaction.ExchangePermission</td>
                        <td>@transaction.Customer.Name</td>
                        <td>@transaction.Distributor.Name</td>

                        <td>@transaction.GovernorateName</td> 
                        <td>@transaction.AreaName</td> 
                        <td>@transaction.CreatedBy</td>
                        <td>@transaction.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>
                            <button class="btn btn-primary details-btn"
                                    data-exchange-permission="@transaction.ExchangePermission"
                                    data-bs-toggle="modal"
                                    data-bs-target="#detailsModal">
                                @SharedLocalizer["Details"]
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination Container -->
    <div id="paginationContainer" class="mt-4 text-center"></div>
</div>

<!-- Modal Section -->
<div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="detailsModalLabel">Coupon Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="modalContent" class="row g-3 justify-content-center">
                    <!-- Dynamic cards will be injected here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>



<style>
    .btn-info {
        background-color: #17a2b8;
        border-color: #17a2b8;
        color: #fff;
    }

        .btn-info:hover {
            background-color: #138496;
            border-color: #117a8b;
        }

    .modal-content {
        border-radius: 10px;
        transition: all 0.3s ease-in-out;
    }

    .modal-backdrop {
        backdrop-filter: blur(5px);
    }

    .table {
        border-radius: 12px;
        overflow: hidden;
        text-align: center;
        margin-top: 20px;
    }

        .table th,
        .table td {
            text-align: center;
            vertical-align: middle;
            padding: 10px;
        }

    .thead-dark th {
        background-color: #007bff !important;
        color: #ffffff !important;
        font-weight: bold;
        text-transform: uppercase;
    }

    .table-hover tbody tr:hover {
        background-color: #e9f5ff;
    }

    #searchBox {
        border-radius: 10px;
        padding: 10px;
        border: 2px solid #007bff;
        font-size: 16px;
    }

        #searchBox::placeholder {
            color: #aaa;
        }

    #paginationContainer .btn {
        font-size: 14px;
        padding: 8px 12px;
        border-radius: 6px;
        margin: 2px;
    }

    #paginationContainer .btn-primary {
        background-color: #007bff;
        color: white;
        border: none;
    }

    #paginationContainer .btn-outline-primary {
        border: 1px solid #007bff;
        color: #007bff;
        background-color: white;
    }

    #paginationContainer .btn:hover {
        opacity: 0.8;
    }

    .custom-card {
    border-radius: 12px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    max-width: 300px;
    background: #fdfdfd;
    margin: 15px;
    cursor: pointer; /* Make the cursor a pointer when hovering over the coupon cards */
    }

.custom-card:hover {
    transform: scale(1.05);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
}

.custom-card .card-title {
    font-weight: bold;
    color: #007bff;
    font-size: 16px;
}

.custom-card .card-subtitle {
    font-size: 14px;
    color: #6c757d;
}

.custom-card .card-text {
    font-size: 14px;
    color: #495057;
}
   

</style>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>

<script>


        
            //JavaScript function to Fetch and Populate Data to pop up window
       document.addEventListener("DOMContentLoaded", function () {
        const detailsButtons = document.querySelectorAll(".details-btn");

        detailsButtons.forEach(button => {
            button.addEventListener("click", async function () {
                const exchangePermission = this.getAttribute("data-exchange-permission");
                const modalContent = document.getElementById("modalContent");

                // Clear previous content
                modalContent.innerHTML = "";

                // Fetch coupon details via AJAX
                const response = await fetch(`/Transaction/GetCoupons?exchangePermission=${exchangePermission}`);
                const coupons = await response.json();

                // Dynamically create a card for each coupon
                if (coupons.length > 0) {
                        // Generate a card for each coupon
                coupons.forEach(coupon => {
                    const card = `
                        <div class="col-md-4">
                            <div class="card custom-card"
                                    data-coupon-type="${coupon.couponType}"
                                    data-start-sequence="${coupon.sequenceStart}"
                                    data-end-sequence="${coupon.sequenceEnd}">
                                <div class="card-body text-center">
                                    <h5 class="card-title"><b>Coupon Sort:</b> ${coupon.couponSort || "N/A"}</h5>
                                    <h6 class="card-subtitle mb-2 text-muted"><b>Coupon Type:</b> ${coupon.couponType || "N/A"}</h6>
                                    <p class="card-text"><b>Start Sequence:</b> ${coupon.sequenceStart}</p>
                                    <p class="card-text"><b>End Sequence:</b> ${coupon.sequenceEnd}</p>
                                </div>
                            </div>
                        </div>
                    `;
                    modalContent.innerHTML += card;
                });

                } else {
                    modalContent.innerHTML = "<p class='text-center'>No coupons found for this Exchange Permission.</p>";
                }
            });
        });
    });

    document.addEventListener("DOMContentLoaded", function () {
        const modalContent = document.getElementById("modalContent");

        // Add click event listener for dynamically generated cards
        modalContent.addEventListener("click", function (event) {
            const card = event.target.closest(".card");
            if (card) {
                const typeOfCoupon = card.getAttribute("data-coupon-type");
                const fromSequence = card.getAttribute("data-start-sequence");
                const toSequence = card.getAttribute("data-end-sequence");

                // Redirect to HistoryGeneratedController's GetAllCoupons action
                const url = `/HistoryGenerated/GetAllCoupons?typeOfCoupon=${encodeURIComponent(typeOfCoupon)}&fromSequence=${encodeURIComponent(fromSequence)}&toSequence=${encodeURIComponent(toSequence)}`;
                window.location.href = url;
            }
        });
    });




    // Pagination functionality
    document.addEventListener("DOMContentLoaded", function () {
        const rowsPerPage = 10; // Rows per page
        const tableBody = document.querySelector("#transactionsTable tbody");
        const paginationContainer = document.getElementById("paginationContainer");

        // Show specific page
        function showPage(pageNumber) {
            const rows = Array.from(tableBody.querySelectorAll("tr"));
            const totalRows = rows.length;
            const totalPages = Math.ceil(totalRows / rowsPerPage);

            rows.forEach((row, index) => {
                row.style.display = (index >= (pageNumber - 1) * rowsPerPage && index < pageNumber * rowsPerPage) ? "" : "none";
            });

            updatePaginationControls(pageNumber, totalPages);
        }

        // Update pagination controls
            // تحديث عناصر الترقيم
    function updatePaginationControls(currentPage, totalPages) {
        paginationContainer.innerHTML = "";

        const maxVisiblePages = 3; // عدد الأزرار المرئية في آن واحد
        let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
        let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

        // التأكد من أن هناك دائمًا `maxVisiblePages` أزرار عندما يكون ذلك ممكنًا
        if (endPage - startPage + 1 < maxVisiblePages) {
            startPage = Math.max(1, endPage - maxVisiblePages + 1);
        }

        // زر "السابق"
        if (currentPage > 1) {
            const prevButton = document.createElement("button");
            prevButton.textContent = "«";
            prevButton.classList.add("btn", "btn-sm", "btn-outline-primary", "mx-1");
            prevButton.addEventListener("click", () => showPage(currentPage - 1));
            paginationContainer.appendChild(prevButton);
        }

        // الأزرار الرقمية
        for (let i = startPage; i <= endPage; i++) {
            const button = document.createElement("button");
            button.textContent = i;
            button.classList.add("btn", "btn-sm", "mx-1");
            button.classList.add(i === currentPage ? "btn-primary" : "btn-outline-primary");
            button.addEventListener("click", () => showPage(i));
            paginationContainer.appendChild(button);
        }

        // زر "التالي"
        if (currentPage < totalPages) {
            const nextButton = document.createElement("button");
            nextButton.textContent = "»";
            nextButton.classList.add("btn", "btn-sm", "btn-outline-primary", "mx-1");
            nextButton.addEventListener("click", () => showPage(currentPage + 1));
            paginationContainer.appendChild(nextButton);
        }
    }

        // Initialize pagination
        showPage(1);
    });

    // search function
     document.getElementById("searchBox").addEventListener("input", function () {
        const searchValue = this.value.toLowerCase(); // Get search term
        const rows = document.querySelectorAll("#transactionsTable tbody tr");

        rows.forEach(row => {
            const cells = Array.from(row.children); // Get all cells in the row
            const isVisible = cells.some(cell => cell.textContent.toLowerCase().includes(searchValue));
            row.style.display = isVisible ? "" : "none"; // Show/hide rows based on search
        });
    });
</script>