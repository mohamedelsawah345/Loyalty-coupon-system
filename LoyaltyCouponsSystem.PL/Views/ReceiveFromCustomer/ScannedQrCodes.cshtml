@using LoyaltyCouponsSystem.DAL.Entity
@model IEnumerable<QRScanLog>

@{
    ViewData["Title"] = "Scanned QR Codes";
    Layout = "~/Views/Shared/_LayoutCoupon.cshtml";
}

<div class="container mt-5">
    <h1 class="text-primary text-center mb-4">Scanned QR Codes Details</h1>

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger text-center">@TempData["Error"]</div>
    }

    <!-- Search Form -->
    <form id="searchForm" class="mb-3">
        <div class="input-group">
            <input type="text" class="form-control" id="searchTerm" placeholder="Search by Serial Number or Scanned By">
            <button type="submit" class="btn btn-primary">Search</button>
        </div>
    </form>

    <!-- Scanned QR Codes Table -->
    <table class="table table-striped" id="qrScanTable">
        <thead>
            <tr>
                <th>Receipt Number</th>
                <th>Serial Number</th>
                <th>Scanned By</th>
                <th>Scan Time</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var log in Model)
            {
                <tr class="qrScanLog">
                    <td>@log.ReceiptNumber</td>
                    <td>@log.SerialNumber</td>
                    <td>@log.ScanedBy</td>
                    <td>@log.ScanTime.ToString("yyyy-MM-dd HH:mm:ss")</td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Pagination Controls -->
    <div id="paginationControls" class="d-flex justify-content-center mt-3">
        <nav>
            <ul class="pagination" id="pagination">
                <!-- Pagination links will be dynamically generated by JavaScript -->
            </ul>
        </nav>
    </div>
</div>
@section Styles {
    <style>
        .pagination .page-link {
            color: white !important; /* Ensure text color is white */
        }

        .pagination .page-item.active .page-link {
            background-color: #007bff !important; /* Optional: Adjust active page background color */
            border-color: #007bff !important;
        }

        .pagination .page-link:hover {
            color: #0056b3 !important; /* Optional: Adjust hover effect */
        }

        /* Optionally, to ensure other colors don't affect your links */
        .pagination .page-item {
            color: white !important;
        }
    </style>
}

@section Scripts {
    <script>
                $(document).ready(function() {
            $('#GovernorateDropdown').change(function() {
                var governorateId = $(this).val();
                console.log("Selected Governorate ID: " + governorateId);

                if (governorateId) {
                    $.ajax({
                        url: "/GetAreasByGovernorate/" + governorateId,
                        type: "GET",
                        success: function(response) {
                            console.log("Received areas:", response); // Debugging
                            $('#AreaDropdown').empty(); // Clear previous options
                            $('#AreaDropdown').append('<option value="">Select Area</option>');
                            $.each(response, function(index, area) {
                                $('#AreaDropdown').append('<option value="' + area.id + '">' + area.name + '</option>');
                            });
                        },
                        error: function(xhr) {
                            console.log("Error fetching areas:", xhr.responseText);
                            $('#AreaDropdown').empty();
                            $('#AreaDropdown').append('<option value="">No areas found</option>');
                        }
                    });
                } else {
                    $('#AreaDropdown').empty();
                    $('#AreaDropdown').append('<option value="">Select Area</option>');
                }
            });
        });

            // Render pagination links based on current page and total pages
            function renderPagination() {
                const paginationContainer = document.getElementById("pagination");
                paginationContainer.innerHTML = ""; // Clear existing pagination links

                // First and Previous buttons
                if (currentPage > 1) {
                    paginationContainer.innerHTML += `
                        <li class="page-item">
                            <a class="page-link" href="#" onclick="changePage(1)">First</a>
                        </li>
                        <li class="page-item">
                            <a class="page-link" href="#" onclick="changePage(${currentPage - 1})">Previous</a>
                        </li>
                    `;
                }

                // Page numbers
                for (let i = 1; i <= totalPages; i++) {
                    paginationContainer.innerHTML += `
                        <li class="page-item ${i === currentPage ? 'active' : ''}">
                            <a class="page-link" href="#" onclick="changePage(${i})">${i}</a>
                        </li>
                    `;
                }

                // Next and Last buttons
                if (currentPage < totalPages) {
                    paginationContainer.innerHTML += `
                        <li class="page-item">
                            <a class="page-link" href="#" onclick="changePage(${currentPage + 1})">Next</a>
                        </li>
                        <li class="page-item">
                            <a class="page-link" href="#" onclick="changePage(${totalPages})">Last</a>
                        </li>
                    `;
                }
            }

            // Change the current page and re-render table and pagination
            function changePage(page) {
                if (page < 1 || page > totalPages) return;
                currentPage = page;
                renderTable();
                renderPagination();
            }
        });
    </script>
}
