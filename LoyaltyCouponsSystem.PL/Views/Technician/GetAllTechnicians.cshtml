@using LoyaltyCouponsSystem.BLL.ViewModel.Technician
@model List<TechnicianViewModel>

@{
    ViewData["Title"] = "All Technicians";
    Layout = "~/Views/Shared/_LayoutCoupon.cshtml";
}

<!-- Include Burger Menu for Mobile -->
@await Html.PartialAsync("_BurgerMenu")
<br>
<div class="container mt-4">
    <h1 class="text-primary text-center"><b>@SharedLocalizer["AllTechnicians"]</b></h1>

    <!-- Search Filters and Add Button -->
    <div class="row mb-4 justify-content-center">
        <div class="col-md-10">
            <div class="input-group shadow-sm">
                <input type="text" id="searchBox" class="form-control" placeholder=@SharedLocalizer["Search"]">
                <a href="@Url.Action("AddTechnician", "Technician")" class="btn btn-add-entity ms-2">
                    <i class="fas fa-plus"></i> @SharedLocalizer["AddNewTechnician"]
                </a>
            </div>
        </div>
    </div>

    <!-- Table -->
    <div class="table-responsive">
        <table id="technicianTable" class="table table-hover table-striped shadow-lg rounded border-light-modern">
            <thead class="thead-dark bg-primary text-white">
                <tr>
                    <th>@SharedLocalizer["Code"]</th>
                    <th>@SharedLocalizer["Name"]</th>
                    <th>@SharedLocalizer["NickName"]</th>
                    <th>@SharedLocalizer["NationalID"]</th>
                    <th>@SharedLocalizer["PhoneNumber1"]</th>
                    <th>@SharedLocalizer["PhoneNumber2"]</th>
                    <th>@SharedLocalizer["PhoneNumber3"]</th>
                    <th>@SharedLocalizer["CustomersDetails"]</th>
                    <th>@SharedLocalizer["Area"]</th>

                    <th>@SharedLocalizer["PhoneNumber3"]</th>
                    <th>@SharedLocalizer["Governorate"]</th>

                    <th> @SharedLocalizer["CreatedBy_At_UpdatedBy_At"] </th>
                    <th>@SharedLocalizer["Status"]</th>
                    <th>@SharedLocalizer["Action"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var technician in Model)
                {
                    <tr id="row-@technician.TechnicianID">
                        <td>@technician.Code</td>
                        <td>@technician.Name</td>
                        <td>@(!string.IsNullOrWhiteSpace(technician.NickName) ? technician.NickName : "N/A")</td>
                        <td>@technician.NationalID</td>
                        <td>@(technician.PhoneNumber1)</td>
                        <td>@(string.IsNullOrEmpty(technician.PhoneNumber2) ? "N/A" : technician.PhoneNumber2)</td>
                        <td>@(string.IsNullOrEmpty(technician.PhoneNumber3) ? "N/A" : technician.PhoneNumber3)</td>


                        <td>
                            <button type="button" class="btn btn-primary btn-sm me-2" data-bs-toggle="modal" data-bs-target="#customersModal-@technician.TechnicianID">
                                View Customers
                            </button>
                        </td>
                        <td>@technician.SelectedCity</td>
                        <td>
                            <button type="button" class="btn btn-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#usersModal-@technician.TechnicianID">
                                View Representatives
                            </button>
                        </td>
                        <td>@technician.SelectedGovernate</td>
                        <td>
                            <button type="button" class="btn btn-info btn-sm" data-bs-toggle="modal" data-bs-target="#createdUpdatedModal-@technician.TechnicianID">
                                View Created/Updated Info
                            </button>
                        </td>
                        <td>
                            <span class="badge @(technician.IsActive ? "bg-success" : "bg-danger")">
                                @(technician.IsActive ? "Active" : "Inactive")
                            </span>
                        </td>
                        <td>
                            <button class="btn btn-sm @(technician.IsActive ? "btn-danger" : "btn-success") toggle-activation"
                                    data-technician-id="@technician.TechnicianID"
                                    data-is-active="@technician.IsActive.ToString().ToLower()">
                                @(technician.IsActive ? "Deactivate" : "Activate")
                            </button>

                            <a href="@Url.Action("UpdateTechnician", "Technician", new { id = technician.TechnicianID })" class="btn btn-outline-primary btn-sm">
                                Edit
                            </a>
                        </td>
                    </tr>

                    <!-- Modal for Assigned Customers -->
                    <div class="modal fade" id="customersModal-@technician.TechnicianID" tabindex="-1" aria-labelledby="customersModalLabel-@technician.TechnicianID" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered modal-lg">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="customersModalLabel-@technician.TechnicianID">Manage Assigned Customers</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <!-- Dropdown to Add Customers (Only Active and Unassigned) -->
                                    <label for="addCustomerDropdown" class="form-label">Add Customers</label>
                                    <select class="form-select mb-3" id="addCustomerDropdown-@technician.TechnicianID">
                                        <option value="" disabled selected>Select a Customer</option>
                                        @foreach (var customer in technician.UnassignedActiveCustomers)
                                        {
                                            <option value="@customer.CustomerID">@customer.Name</option>
                                        }
                                    </select>
                                    <button class="btn btn-primary mb-3" onclick="addCustomer('@technician.TechnicianID')">Add Customer</button>
                                

                                    <!-- Searchable List of Assigned Customers -->
                                    <ul class="list-group" id="customerList-@technician.TechnicianID">
                                        @foreach (var customer in technician.SelectedCustomerNames)
                                        {
                                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                                <span>@customer</span>
                                                <button class="btn btn-sm btn-outline-danger" onclick="removeCustomer('@technician.TechnicianID', '@customer')">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </li>
                                        }
                                    </ul>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Modal for Assigned Users -->
                    <div class="modal fade" id="usersModal-@technician.TechnicianID" tabindex="-1" aria-labelledby="usersModalLabel-@technician.TechnicianID" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered modal-lg">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="usersModalLabel-@technician.TechnicianID">Manage Assigned Representatives</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <!-- Dropdown to Add Representatives (Only Active and Unassigned) -->
                                    <label for="addUserDropdown-@technician.TechnicianID" class="form-label">Add Representative</label>
                                    @if (technician.UnassignedActiveUsers != null && technician.UnassignedActiveUsers.Any())
                                    {
                                        <select class="form-select mb-3" id="addUserDropdown-@technician.TechnicianID" aria-label="Select a representative to add">
                                            <option value="" disabled selected>Select a Representative</option>
                                            @foreach (var user in technician.UnassignedActiveUsers)
                                            {
                                                <option value="@user.Id">@user.UserName</option>
                                            }
                                        </select>
                                        <button class="btn btn-primary mb-3" onclick="addUser('@technician.TechnicianID')">Add Representative</button>
                                    }
                                    else
                                    {
                                        <p class="text-muted">No unassigned representatives available.</p>
                                    }

                                    <!-- Searchable List of Assigned Representatives -->
                                    @if (technician.SelectedUserNames != null && technician.SelectedUserNames.Any())
                                    {
                                        <ul class="list-group" id="representativeList-@technician.TechnicianID">
                                            @foreach (var userName in technician.SelectedUserNames)
                                            {
                                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                                    <span>@userName</span>
                                                    <button class="btn btn-sm btn-outline-danger" onclick="removeRepresentative('@technician.TechnicianID', '@userName')" aria-label="Remove representative">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </li>
                                            }
                                        </ul>
                                    }
                                    else
                                    {
                                        <p class="text-muted">No representatives assigned yet.</p>
                                    }
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                </div>
                            </div>
                        </div>
                    </div>


                    <!-- Modal for Phone Numbers -->
                    <div class="modal fade" id="phoneNumbersModal-@technician.TechnicianID" tabindex="-1" aria-labelledby="phoneNumbersModalLabel-@technician.TechnicianID" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered modal-md">
                            <div class="modal-content shadow-lg rounded-4">
                                <!-- Modal Header -->
                                <div class="modal-header bg-gradient-primary text-white rounded-top-4">
                                    <h5 class="modal-title" id="phoneNumbersModalLabel-@technician.TechnicianID">
                                        <i class="fas fa-phone-alt me-2"></i> Phone Numbers
                                    </h5>
                                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>

                                <!-- Modal Body -->
                                <div class="modal-body p-4">
                                    <div class="list-group">
                                        <div class="list-group-item d-flex justify-content-between align-items-center">
                                            <span><strong>Phone Number 1:</strong></span>
                                            <span class="text-primary">@technician.PhoneNumber1</span>
                                        </div>
                                        <div class="list-group-item d-flex justify-content-between align-items-center">
                                            <span><strong>Phone Number 2:</strong></span>
                                            <span class="text-muted">@technician.PhoneNumber2</span>
                                        </div>
                                        <div class="list-group-item d-flex justify-content-between align-items-center">
                                            <span><strong>Phone Number 3:</strong></span>
                                            <span class="text-muted">@technician.PhoneNumber3</span>
                                        </div>
                                    </div>
                                </div>

                                <!-- Modal Footer -->
                                <div class="modal-footer rounded-bottom-4">
                                    <button type="button" class="btn btn-outline-primary" data-bs-dismiss="modal">
                                        <i class="fas fa-times"></i> Close
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>


                    <!-- Modal for Created/Updated Info -->
                    <div class="modal fade" id="createdUpdatedModal-@technician.TechnicianID" tabindex="-1" aria-labelledby="createdUpdatedModalLabel-@technician.TechnicianID" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered modal-lg">
                            <div class="modal-content shadow-lg rounded-4">
                                <!-- Modal Header -->
                                <div class="modal-header bg-primary text-white rounded-top-4">
                                    <h5 class="modal-title" id="createdUpdatedModalLabel-@technician.TechnicianID">
                                        <i class="fas fa-info-circle me-2"></i> Created & Updated Information
                                    </h5>
                                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>

                                <!-- Modal Body -->
                                <div class="modal-body p-4">
                                    <div class="row mb-3">
                                        <div class="col-6 text-center">
                                            <div class="card bg-light border-0 shadow-sm rounded-3">
                                                <div class="card-body">
                                                    <h6 class="card-title text-primary fw-bold">Created By</h6>
                                                    <p class="card-text text-muted">@technician.CreatedBy</p>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-6 text-center">
                                            <div class="card bg-light border-0 shadow-sm rounded-3">
                                                <div class="card-body">
                                                    <h6 class="card-title text-primary fw-bold">Created At</h6>
                                                    <p class="card-text text-muted">@technician.CreatedAt</p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-6 text-center">
                                            <div class="card bg-light border-0 shadow-sm rounded-3">
                                                <div class="card-body">
                                                    <h6 class="card-title text-primary fw-bold">Updated By</h6>
                                                    <p class="card-text text-muted">@technician.UpdatedBy</p>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-6 text-center">
                                            <div class="card bg-light border-0 shadow-sm rounded-3">
                                                <div class="card-body">
                                                    <h6 class="card-title text-primary fw-bold">Updated At</h6>
                                                    <p class="card-text text-muted">@technician.UpdatedAt</p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Modal Footer -->
                                <div class="modal-footer rounded-bottom-4">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                        <i class="fas fa-times"></i> Close
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                }
            </tbody>
        </table>
    </div>

    <!-- Modal for confirmation -->
    <div class="modal fade" id="toggleConfirmationModal" tabindex="-1" role="dialog" aria-labelledby="toggleConfirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="toggleConfirmationModalLabel">Confirm Action</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Are you sure you want to <span id="toggleAction"></span> this technician?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="confirmToggleButton">Confirm</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Pagination Container -->
    <div id="paginationContainer" class="mt-4 text-center"></div>
</div>

<style>

    /* General Styling */
    body {
        font-family: Arial, sans-serif;
    }

    h1 {
        font-family: 'Verdana', sans-serif;
        font-weight: bold;
        font-size: 24px;
        color: #007bff;
    }

    /* Table Styling */
    .table-responsive {
        padding: 0;
        margin: 0 auto;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        table-layout: auto;
        text-align: center;
    }

        .table th,
        .table td {
            vertical-align: middle;
            padding: 12px;
            font-size: 14px;
            white-space: nowrap; /* Ensure data remains on one line */
        }

        .table th {
            background-color: #007bff !important;
            color: #ffffff !important;
            font-weight: bold;
            text-transform: uppercase;
        }

    .table-hover tbody tr:hover {
        background-color: #e9f5ff;
    }

    /* Button Styling */
    .btn-add-entity {
        background-color: #007bff !important;
        color: white !important;
        font-weight: bold !important;
        border-radius: 30px !important;
        padding: 10px 20px !important;
        text-decoration: none !important;
        text-align: center !important;
        display: inline-block !important;
    }

        .btn-add-entity:hover {
            background-color: #0056b3;
            color: white !important;
        }

    .btn-outline-primary:hover {
        background-color: #007bff;
        color: white;
    }

    .btn-outline-danger:hover {
        background-color: #dc3545;
        color: white;
    }

    /* Search Box Styling */
    #searchBox {
        border-radius: 30px;
        padding: 12px 20px;
        font-size: 16px;
        border: 2px solid #007bff;
        background-color: #f9f9f9;
        flex: 1;
    }

        #searchBox::placeholder {
            font-style: italic;
            color: #aaa;
        }

    /* Pagination Buttons */
    /* Pagination Button Styling */
    #paginationContainer .btn {
        font-size: 14px;
        padding: 8px 12px;
        margin: 2px;
        border-radius: 4px;
        transition: all 0.3s ease;
    }

        #paginationContainer .btn.active {
            background-color: #007bff; /* Active button color */
            color: white;
            border: 1px solid #007bff;
            font-weight: bold;
        }

        #paginationContainer .btn:not(.active):hover {
            background-color: #e9f5ff;
            color: #007bff;
        }

    /* Responsive Design */
    @@media screen and (max-width: 768px) {
        .table th,
        .table td {
            font-size: 12px;
            padding: 6px;
        }

        .btn {
            font-size: 12px;
            padding: 6px 10px;
        }

        #searchBox {
            font-size: 14px;
            padding: 8px 12px;
        }
    }

    /* General Styling for Title */
    h1 {
        font-family: 'Verdana', sans-serif;
        font-weight: bold;
        font-size: 24px;
        color: #007bff;
    }

    /* Modal Styling */
    .modal-content {
        border-radius: 12px;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
    }

    .modal-header {
        border-bottom: none;
        background: linear-gradient(to right, #007bff, #00c6ff);
        color: white;
    }

        .modal-header.bg-info {
            background-color: #17a2b8;
            color: white;
        }

        .modal-header.bg-primary {
            background-color: #007bff;
            color: white;
        }

    .modal-body {
        font-size: 16px;
        color: #555;
        padding: 20px;
        background-color: #f9f9f9;
    }

    .list-group-item {
        border: none;
        padding: 16px;
        font-size: 15px;
    }

        .list-group-item:not(:last-child) {
            border-bottom: 1px solid #ddd;
        }

    .text-primary {
        font-weight: bold;
        color: #007bff !important;
    }

    .text-muted {
        color: #6c757d !important;
    }

    .modal-footer {
        border-top: none;
        background-color: #f9f9f9;
        padding: 15px;
    }

    .btn-outline-primary {
        border-color: #007bff;
        color: #007bff;
        transition: background-color 0.2s ease, color 0.2s ease;
    }

        .btn-outline-primary:hover {
            background-color: #007bff;
            color: white;
        }

    .table-bordered {
        width: 100%;
        margin: 0;
    }

        .table-bordered th,
        .table-bordered td {
            padding: 12px;
            vertical-align: middle;
        }

    .btn-close {
        font-size: 20px;
        line-height: 1;
        border: none;
        outline: none;
        background: transparent;
        cursor: pointer;
    }

        .btn-close:hover {
            color: #fff;
            opacity: 0.8;
        }

    /* Inactive Row Styling */
    .inactive-row {
        background-color: #f5f5f5; /* Light gray background */
        color: #6c757d; /* Muted text color */
    }

        .inactive-row td {
            text-decoration: line-through; /* Strikethrough for inactive rows */
        }

            /* Remove line-through for Actions column */
            .inactive-row td:last-child,
            .inactive-row td:last-child * {
                text-decoration: none !important; /* Remove strikethrough for buttons/links */
            }



</style>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<!-- Bootstrap JS (includes Popper.js for modal handling) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
<!--Sweat Alert-->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


<script>
    $(document).ready(function () {
        // Initialize the rows on page load
        updateRows();


            function rearrangeRows() {
        const tableBody = document.querySelector("#technicianTable tbody");
        const rows = Array.from(tableBody.querySelectorAll("tr"));

        // Separate active and inactive rows
        const activeRows = rows.filter(row => row.querySelector(".badge").textContent.trim() === "Active");
        const inactiveRows = rows.filter(row => row.querySelector(".badge").textContent.trim() === "Inactive");

        // Sort active rows by TechnicianID in descending order
        activeRows.sort((a, b) => {
            const idA = parseInt(a.id.replace("row-", ""), 10);
            const idB = parseInt(b.id.replace("row-", ""), 10);
            return idB - idA; // Descending order
        });

        // Clear the table body and append rows in the new order
        tableBody.innerHTML = "";
        activeRows.forEach(row => tableBody.appendChild(row)); // Add active rows first
        inactiveRows.forEach(row => tableBody.appendChild(row)); // Add inactive rows last
    }


        // Handle toggle activation on button click
        $(document).on('click', '.toggle-activation', function () {
            const technicianId = $(this).data('technician-id');
            const isActive = $(this).data('is-active');
            const action = isActive ? 'Deactivate' : 'Activate';

            // Show SweetAlert confirmation dialog
            Swal.fire({
                title: `Are you sure you want to ${action.toLowerCase()} this technician?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: isActive ? '#dc3545' : '#28a745',
                cancelButtonColor: '#6c757d',
                confirmButtonText: action,
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    toggleActivation(technicianId, !isActive);
                }
            });
        });

        // Toggle technician activation (send request to the server)
        function toggleActivation(technicianId, newIsActive) {
            console.log(`Toggling activation for Technician ID: ${technicianId}, New Active Status: ${newIsActive}`);

            // Make a POST request to toggle the activation status
            fetch(`/Technician/ToggleActivation?technicianId=${technicianId}&isActive=${newIsActive}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        rearrangeRows(); // Rearrange rows after activation status change
                        console.log('Activation status updated successfully.');

                        // Update the row status in the UI
                        const row = $(`#row-${technicianId}`);
                        const statusBadge = row.find('.badge');
                        const toggleButton = row.find('.toggle-activation');

                        if (newIsActive) {
                            // Update to Active
                            statusBadge.text("Active").removeClass("bg-danger").addClass("bg-success");
                            toggleButton.text("Deactivate").removeClass("btn-success").addClass("btn-danger");
                            toggleButton.data('is-active', true);

                            // Remove line-through styling
                            row.removeClass('inactive-row');
                            row.find('td:not(:nth-child(7), :nth-child(8), :nth-child(9), :nth-child(10), :nth-child(11))')
                                .css('text-decoration', '');

                            // Move the row back to the top of the table
                            $('#technicianTable tbody').prepend(row);
                        } else {
                            // Update to Inactive
                            statusBadge.text("Inactive").removeClass("bg-success").addClass("bg-danger");
                            toggleButton.text("Activate").removeClass("btn-danger").addClass("btn-success");
                            toggleButton.data('is-active', false);

                            // Add line-through styling
                            row.addClass('inactive-row');
                            row.find('td:not(:nth-child(7), :nth-child(8), :nth-child(9), :nth-child(10), :nth-child(11))')
                                .css('text-decoration', 'line-through');

                            // Move the row to the end of the table
                            $('#technicianTable tbody').append(row);
                        }

                        // Update pagination after reordering rows
                        updatePagination();
                    } else {
                        Swal.fire('Error', 'Failed to toggle activation status.', 'error');
                    }
                })
                .catch(error => Swal.fire('Error', `Error: ${error}`, 'error'));
        }

        // Search functionality
        $("#searchBox").on("input", function () {
            const searchValue = $(this).val().toLowerCase().trim();
            const rows = $("#technicianTable tbody tr");

            rows.each(function () {
                const row = $(this);
                const code = row.find("td:nth-child(1)").text().toLowerCase();
                const name = row.find("td:nth-child(2)").text().toLowerCase();
                const nickname = row.find("td:nth-child(3)").text().toLowerCase();
                const nationalId = row.find("td:nth-child(4)").text().toLowerCase();
                const governorate = row.find("td:nth-child(5)").text().toLowerCase();
                const city = row.find("td:nth-child(6)").text().toLowerCase();
                const status = row.find("td:nth-child(9) .badge").text().toLowerCase().trim();

                const isStatusMatch =
                    searchValue === "active" ? status === "active" :
                    searchValue === "inactive" ? status === "inactive" :
                    status.includes(searchValue);

                const isOtherMatch =
                    code.includes(searchValue) ||
                    name.includes(searchValue) ||
                    nickname.includes(searchValue) ||
                    nationalId.includes(searchValue) ||
                    governorate.includes(searchValue) ||
                    city.includes(searchValue);

                row.toggle(isStatusMatch || isOtherMatch);
            });
        });

        // Update rows' styles and order based on their active/inactive status
        function updateRows() {
            $('#technicianTable tbody tr').each(function () {
                const toggleButton = $(this).find('.toggle-activation');
                const isActive = toggleButton.data('is-active');

                if (!isActive) {
                    $(this).addClass('inactive-row');
                    $(this).find('td:not(:nth-child(7), :nth-child(8), :nth-child(9), :nth-child(10), :nth-child(11))')
                        .css('text-decoration', 'line-through');
                } else {
                    $(this).removeClass('inactive-row');
                    $(this).find('td').css('text-decoration', '');
                }
            });

            reorderRows();
            rearrangeRows(); // Ensure rows are rearranged after styling

        }

        // Reorder rows to move inactive rows to the end of the table
        function reorderRows() {
            const activeRows = [];
            const inactiveRows = [];

            $('#technicianTable tbody tr').each(function () {
                const isActive = $(this).find('.toggle-activation').data('is-active');
                if (isActive) {
                    activeRows.push($(this));
                } else {
                    inactiveRows.push($(this));
                }
            });

            const tbody = $('#technicianTable tbody');
            tbody.empty();
            activeRows.forEach(row => tbody.append(row));
            inactiveRows.forEach(row => tbody.append(row));
        }

        // Pagination functionality
            function updatePagination() {
        const rowsPerPage = 10;
        const rows = $('#technicianTable tbody tr');
        const totalRows = rows.length;
        const totalPages = Math.ceil(totalRows / rowsPerPage);

        rows.hide();
        let currentPage = 1;

        function showPage(pageNumber) {
            const start = (pageNumber - 1) * rowsPerPage;
            const end = start + rowsPerPage;

            rows.hide();
            rows.slice(start, end).show();

            updatePaginationControls(pageNumber, totalPages);
        }

        function updatePaginationControls(currentPage, totalPages) {
            const paginationContainer = $('#paginationContainer');
            paginationContainer.empty();

            const maxVisiblePages = 3; // Limit the number of pagination buttons displayed
            let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

            if (endPage - startPage < maxVisiblePages - 1) {
                startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }

            // Add "Previous" button
            if (currentPage > 1) {
                const prevButton = $('<button>')
                    .addClass('btn btn-sm mx-1 btn-outline-primary')
                    .text('«')
                    .on('click', () => showPage(currentPage - 1));
                paginationContainer.append(prevButton);
            }

            // Add page number buttons
            for (let i = startPage; i <= endPage; i++) {
                const button = $('<button>')
                    .addClass(`btn btn-sm mx-1 ${i === currentPage ? 'btn-primary' : 'btn-outline-primary'}`)
                    .text(i)
                    .on('click', () => showPage(i));
                paginationContainer.append(button);
            }

            // Add "Next" button
            if (currentPage < totalPages) {
                const nextButton = $('<button>')
                    .addClass('btn btn-sm mx-1 btn-outline-primary')
                    .text('»')
                    .on('click', () => showPage(currentPage + 1));
                paginationContainer.append(nextButton);
            }
        }

        showPage(1);
    }

        updatePagination();
    });


            $(document).on('input', '.modal-search-box', function () {
        const query = $(this).val().toLowerCase();
        const listItems = $(this).closest('.modal-body').find('.list-group-item');

        listItems.each(function () {
            const itemText = $(this).text().toLowerCase();
            $(this).toggle(itemText.includes(query));
        });
    });

     
           // Function to Add a Customer
            function addCustomer(technicianId) {
        const customerId = document.getElementById(`addCustomerDropdown-${technicianId}`).value;
        console.log("Customer ID:", customerId); // Log for debugging

        if (!customerId) {
            Swal.fire('Error', 'Please select a customer to add.', 'error');
            return;
        }

        Swal.fire({
            title: 'Confirm Addition',
            text: 'Are you sure you want to assign this customer?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, Add',
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    type: "POST",
                    url: "/Technician/AssignCustomer", // Ensure this matches your route
                    data: {
                        technicianId: technicianId,
                        customerId: customerId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() // Include token
                    },
                    success: function (response) {
                        Swal.fire('Success', 'Customer added successfully!', 'success').then(() => {
                            location.reload(); // Reload the page or modal to reflect changes
                        });
                    },
                    error: function (xhr, status, error) {
                        Swal.fire('Error', 'Failed to add customer. Please try again.', 'error');
                        console.log("Error Details:", error); // Log error details for debugging

                        // Check if the response contains governate and city
                        const responseData = xhr.responseJSON || {};  // Modify this based on the structure of your response

                        // Log the response to check the data
                        console.log("Response Data:", responseData);

                        // Populate the fields if data is available
                        if (responseData.governate) {
                            $('#governateField').val(responseData.governate);  // Populate with received governate
                        } else {
                            $('#governateField').val('N/A'); // Default to 'N/A' if no governate
                        }

                        if (responseData.city) {
                            $('#cityField').val(responseData.city);  // Populate with received city
                        } else {
                            $('#cityField').val('N/A'); // Default to 'N/A' if no city
                        }

                        // Optional: Force a DOM reflow after dynamic changes (for IE or old browsers)
                        setTimeout(() => {
                            $('#governateField').trigger('change'); // Trigger change event if required
                            $('#cityField').trigger('change'); // Trigger change event if required
                        }, 100);
                    }
                });
            }
        });
    }






       // Function to Remove a Customer by Name
    function removeCustomer(technicianId, customerName) {
        Swal.fire({
            title: 'Confirm Removal',
            text: 'Are you sure you want to remove this customer?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, Remove',
        }).then((result) => {
            if (result.isConfirmed) {
                // Send AJAX request to remove customer by name
                $.post(`/Technician/RemoveCustomer`, { technicianId, customerName }, function (response) {
                    Swal.fire('Success', 'Customer removed successfully!', 'success').then(() => {
                        location.reload(); // Reload the page or modal to reflect changes
                    });
                }).fail(() => {
                    Swal.fire('Error', 'Failed to remove customer. Please try again.', 'error');
                });
            }
        });
    }


                  function addUser(technicianId) {
        const dropdown = document.getElementById(`addUserDropdown-${technicianId}`);
        const selectedUserId = dropdown?.value;

        console.log(`Technician ID: ${technicianId}`);
        console.log(`Selected User ID: ${selectedUserId}`);

        if (selectedUserId) {
            // Confirmation using SweetAlert2
            Swal.fire({
                title: 'Are you sure?',
                text: "Do you want to assign this representative?",
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, assign!'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Example AJAX (replace with actual AJAX)
                    $.post(`/Technician/AssignUser`, { technicianId: technicianId, userId: selectedUserId })
                        .done(() => {
                            Swal.fire('Assigned!', 'Representative has been successfully assigned.', 'success')
                                .then(() => {
                                    // Refresh the page after successful assignment
                                    location.reload();
                                });
                        })
                        .fail(() => {
                            Swal.fire('Error!', 'Could not assign representative.', 'error');
                        });
                }
            });
        } else {
            // Error notification using SweetAlert2
            Swal.fire(
                'No Representative Selected',
                'Please select a representative to add.',
                'warning'
            );
        }
    }



            function removeRepresentative(technicianId, userName) {
        // Confirmation using SweetAlert2
        Swal.fire({
            title: 'Are you sure?',
            text: `Do you want to remove representative ${userName}?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, remove!'
        }).then((result) => {
            if (result.isConfirmed) {
                // Example AJAX call (send technicianId and userId to the server)
                $.post(`/Technician/RemoveUser`, { technicianId: technicianId, userId: userName })
                    .done(() => {
                        Swal.fire(
                            'Removed!',
                            `Representative ${userName} has been removed.`,
                            'success'
                        ).then(() => {
                            // Refresh the page after successful removal
                            location.reload();
                        });
                    })
                    .fail(() => {
                        Swal.fire('Error!', 'Could not remove representative.', 'error');
                    });
            }
        });
    }



    function filterRepresentativesList(input, technicianId) {
        const filter = input.value.toLowerCase();
        const list = document.getElementById(`representativeList-${technicianId}`);
        const items = list?.getElementsByTagName('li') || [];

        Array.from(items).forEach(item => {
            const text = item.textContent || item.innerText;
            item.style.display = text.toLowerCase().includes(filter) ? '' : 'none';
        });
    }


    // Function to Filter Assigned Customers List
    function filterCustomersList(input, technicianId) {
        const filter = input.value.toLowerCase();
        const list = document.getElementById(`customerList-${technicianId}`);
        filterList(list, filter);
    }

   

    // Helper Function to Filter List Items
    function filterList(list, filter) {
        Array.from(list.children).forEach((item) => {
            const text = item.querySelector('span').textContent.toLowerCase();
            item.style.display = text.includes(filter) ? '' : 'none';
        });
    }



</script>



